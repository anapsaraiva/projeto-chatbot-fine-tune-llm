import streamlit as st
import requests

st.set_page_config(page_title="Consulta de Reposit√≥rios GitHub", page_icon="üîéÔ∏è")

st.title("üîéÔ∏è Consulta de Reposit√≥rios GitHub")

repo_url = st.text_input("Insira a URL do reposit√≥rio do GitHub:", placeholder="Ex: https://github.com/pallets/flask")

if st.button("Processar Reposit√≥rio"):
    if repo_url:
        try:
            # Chamar o endpoint /process_repo da API FastAPI
            response = requests.post(
                "http://localhost:8000/process_repo",
                json={"repo_url": repo_url}
            )
            if response.status_code == 200:
                st.success("Reposit√≥rio processado com sucesso!")
            else:
                st.error(f"Erro ao processar reposit√≥rio: {response.json().get('detail', 'Erro desconhecido')}")
        except Exception as e:
            st.error(f"Erro ao conectar com a API: {str(e)}")
    else:
        st.warning("Por favor, insira uma URL v√°lida.")

question = st.text_input("Fa√ßa uma pergunta sobre o reposit√≥rio:", placeholder="Ex: O que √© Flask?")

if st.button("Enviar Pergunta"):
    if repo_url and question:
        try:
            # Chamar o endpoint /ask da API FastAPI
            response = requests.post(
                "http://localhost:8000/ask",
                json={"repo_url": repo_url, "question": question}
            )
            if response.status_code == 200:
                st.success("Resposta gerada com sucesso!")
                st.write("**Resposta:**")
                st.write(response.json().get("response", "Nenhuma resposta encontrada."))
            else:
                st.error(f"Erro ao gerar resposta: {response.json().get('detail', 'Erro desconhecido')}")
        except Exception as e:
            st.error(f"Erro ao conectar com a API: {str(e)}")
    else:
        st.warning("Por favor, insira uma URL e uma pergunta v√°lidas.")
